[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Marine Development Ecology Branch database (MDEBdb) contains geospatial data related better understanding interactions marine development (like offshore wind) NOAA Fisheries trust resources. creation database funded Federal Permitting Improvement Steering Council (FPISC), embodies “shared database, shared schema” approach data management.data dictionary meant catalog communicate structure content MDEBdb, provide meaningful descriptions data objects users.","code":""},{"path":"survey-mitigation.html","id":"survey-mitigation","chapter":"2 Survey Mitigation","heading":"2 Survey Mitigation","text":"","code":""},{"path":"survey-mitigation.html","id":"ecosystem-monitoring-survey","chapter":"2 Survey Mitigation","heading":"2.1 Ecosystem Monitoring Survey","text":"","code":""},{"path":"survey-mitigation.html","id":"inport-metadata","chapter":"2 Survey Mitigation","heading":"2.1.1 InPort Metadata","text":"Yes, see .","code":""},{"path":"survey-mitigation.html","id":"description","chapter":"2 Survey Mitigation","heading":"2.1.2 Description","text":"Shelf-wide Research Vessel Surveys conducted 6-7 times per year continental shelf Cape Hatteras, North Carolina Cape Sable, Nova Scotia, using NOAA research ships charter vessels. Cape Hatteras Cape Sable area divided four regions, 30 randomly selected stations targeted sampling region.investigation utilizes shelf-wide research vessel surveys gather data planktonic organisms including zooplankton ichtyoplankton. Environmental parameters also collected stored different databases (e.g., OCDBS).investigation monitors fishery-relevant components Northeast Shelf ecosystem, characterize baseline conditions determine effects biological physical processes recruitment Northeast shelf fishes.","code":""},{"path":"survey-mitigation.html","id":"spatial-extent","chapter":"2 Survey Mitigation","heading":"2.1.3 Spatial Extent","text":"","code":""},{"path":"survey-mitigation.html","id":"layers","chapter":"2 Survey Mitigation","heading":"2.1.4 Layers","text":"","code":""},{"path":"survey-mitigation.html","id":"fields","chapter":"2 Survey Mitigation","heading":"2.1.5 Fields","text":"","code":""},{"path":"survey-mitigation.html","id":"ecosystem_monitoring_strata","chapter":"2 Survey Mitigation","heading":"2.1.5.1 Ecosystem_Monitoring_Strata","text":"","code":""},{"path":"survey-mitigation.html","id":"ecosystem_monitoring_fixed_oceanography_stations","chapter":"2 Survey Mitigation","heading":"2.1.5.2 Ecosystem_Monitoring_Fixed_Oceanography_Stations","text":"","code":""},{"path":"connecting-r-and-arcgis.html","id":"connecting-r-and-arcgis","chapter":"3 Connecting R and ArcGIS","heading":"3 Connecting R and ArcGIS","text":"need install R-ArcGIS Bridge appropriate version R ’re using, can found . downloaded, need unzip install package R local file. Alternatively, can install ESRI directly R:documentation R-Bridge ArcGIS, see . Also, need install ArcGIS metapackage, still development currently includes arcgislayers arcgisutils packages.updates, see .example presented pull data ArcGIS online using feature layer feature server url.\nFigure 3.1: Map USA.\n","code":"\ninstall.packages(\"arcgisbinding\", repos = \"<https://r.esri.com>\", type = \"win.binary\") \nremotes::install_github(\"R-ArcGIS/arcgis\")\n# load libraries\nlibrary(arcgisbinding) \narc.check_product() \nlibrary(arcgislayers)\nlibrary(arcgisutils) \nlibrary(ggplot2)\n\n# connect to ArcGIS.com\narc.portal_connect(url =  \"https://noaa.maps.arcgis.com\", user = \"\", password = \"\") # enter ArcGIS.com username and password\narc.check_portal()\n\n# create an example map of USA using REST API Layer:USA Counties\n# provide feature server url and feature layer\nfeature_server_url <- \"https://services2.arcgis.com/FiaPA4ga0iQKduv3/arcgis/rest/services/TIGERweb_Counties_v1/FeatureServer/0\"\n\n# create a feature layer object\ndata <- arc_open(feature_server_url)\n\n# query the feature layer and return the layer as an sf (simple feature) object\nsf_data <- arc_select(data)\n\n# create map from sf object\nUSA_map <- ggplot(data = sf_data) + \n  geom_sf() +\n  theme_classic()\nUSA_map"},{"path":"connecting-python-and-arcgis.html","id":"connecting-python-and-arcgis","chapter":"4 Connecting python and ArcGIS","heading":"4 Connecting python and ArcGIS","text":"code connecting arcgis.com via ArcGIS API python, refer https://github.com/Esri/arcgis-python-api source code. documentation https://developers.arcgis.com/python/latest/.","code":"# load libraries\nimport arcpy\nimport arcgis\nfrom arcgis.gis import GIS\nfrom arcgis.features import FeatureLayer\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import Polygon\n\n# log into arcgis online\n# see documentation for logging in with various authentication schemes \n# https://developers.arcgis.com/python/latest/guide/working-with-different-authentication-schemes/\nuser = \"\" # enter arcgis.com username\npassword = \"\" # enter arcgis.com password\nportal = \"https://noaa.maps.arcgis.com/\"\ngis = GIS(portal, user, password)\n\n# alternatively, log in using ArcGIS Pro, if Pro is on system computer and is logged into the portal\ngis = GIS(\"PRO\")\n\n# test arcis.com connection\nif gis is not None and gis._portal.is_logged_in:\n  print(f\"Successfully logged in as: {gis.properties.user['username']}\")\nelse:\n  print(\"Login failed.\")\n\n# example map\n# pull data from arcgis online using feature server url, from ArcGIS REST API\n# in this example, taking the World Continents feature layer from Living Atlas \nitem_url = \"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Continents/FeatureServer/0\"\n\n# retrieve item from arcgis online\nworld_layer = FeatureLayer(item_url)\n\n# query feature layer to return all data\nworld_features = world_layer.query(where=\"1=1\")\n\n# create a list to hold the geometries\ngeometries = []\n\n# loop through features to extract geometries\nfor feature in world_features.features:\n  geom = feature.geometry\n  if geom['rings']:\n    for ring in geom['rings']:\n      polygon = Polygon(ring)\n      geometries.append(polygon)\n\n# create geopandas dataframe\ngdf = gpd.GeoDataFrame(geometry=geometries)\n\n# create map using geopandas\nfig,ax = plt.subplots(figsize=(10,6))\ngdf.plot(ax=ax, color='#D1E7DD', edgecolor='black')\nplt.title('World Map')\nax.set_xticks([]) #remove tick marks\nax.set_yticks([])\nax.xaxis.set_ticklabels([]) #remove tick labels\nax.yaxis.set_ticklabels([])\nplt.show()"}]
